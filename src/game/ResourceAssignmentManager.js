const logger = require('../utils/Logger');

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∫–æ–≥–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —é–Ω–∏—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω —Ä–µ—Å—É—Ä—Å.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —é–Ω–∏—Ç–æ–≤.
 */
class ResourceAssignmentManager {
    constructor() {
        // Map: resourceKey -> { unitId, resourceInfo, assignedAt, priority }
        this.resourceReservations = new Map();
        
        // Map: unitId -> { resourceKey, assignment }
        this.unitAssignments = new Map();
        
        // Set of units that died and need cleanup
        this.deadUnits = new Set();
        
        // Timeout for stale assignments (10 turns)
        this.assignmentTimeout = 10 * 60 * 1000; // 10 minutes in ms
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     * @param {Object} resource - –†–µ—Å—É—Ä—Å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ q, r
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ä–µ—Å—É—Ä—Å–∞
     */
    getResourceKey(resource) {
        return `${resource.q}_${resource.r}_${resource.type}`;
    }

    /**
     * –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
     * @param {string} unitId - ID —é–Ω–∏—Ç–∞
     * @param {Object} resource - –†–µ—Å—É—Ä—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)
     * @param {Object} assignmentInfo - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
     * @returns {boolean} true, –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω
     */
    reserveResource(unitId, resource, priority, assignmentInfo = {}) {
        const resourceKey = this.getResourceKey(resource);
        const existingReservation = this.resourceReservations.get(resourceKey);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        if (existingReservation) {
            // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º
            if (priority > existingReservation.priority) {
                logger.info(`üîÑ Unit ${unitId} taking over resource at (${resource.q}, ${resource.r}) from unit ${existingReservation.unitId} (priority ${priority} > ${existingReservation.priority})`);
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                this.releaseUnitAssignment(existingReservation.unitId);
            } else {
                logger.debug(`‚ùå Unit ${unitId} cannot reserve resource at (${resource.q}, ${resource.r}) - already reserved by unit ${existingReservation.unitId} with higher priority`);
                return false;
            }
        }
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —é–Ω–∏—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        this.releaseUnitAssignment(unitId);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        const reservation = {
            unitId,
            resourceInfo: resource,
            assignedAt: Date.now(),
            priority,
            assignmentInfo
        };
        
        this.resourceReservations.set(resourceKey, reservation);
        this.unitAssignments.set(unitId, {
            resourceKey,
            assignment: {
                type: 'resource_collection',
                target: resource,
                priority,
                ...assignmentInfo
            }
        });
        
        logger.info(`‚úÖ Unit ${unitId} reserved resource at (${resource.q}, ${resource.r}) with priority ${priority}`);
        return true;
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —é–Ω–∏—Ç–∞
     * @param {string} unitId - ID —é–Ω–∏—Ç–∞
     */
    releaseUnitAssignment(unitId) {
        const unitAssignment = this.unitAssignments.get(unitId);
        if (unitAssignment) {
            const reservation = this.resourceReservations.get(unitAssignment.resourceKey);
            if (reservation && reservation.unitId === unitId) {
                this.resourceReservations.delete(unitAssignment.resourceKey);
                logger.debug(`üîì Released resource reservation for unit ${unitId}`);
            }
            this.unitAssignments.delete(unitId);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å
     * @param {Object} resource - –†–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true, –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω
     */
    isResourceReserved(resource) {
        const resourceKey = this.getResourceKey(resource);
        return this.resourceReservations.has(resourceKey);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç ID —é–Ω–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Å—É—Ä—Å
     * @param {Object} resource - –†–µ—Å—É—Ä—Å
     * @returns {string|null} ID —é–Ω–∏—Ç–∞ –∏–ª–∏ null
     */
    getResourceReserver(resource) {
        const resourceKey = this.getResourceKey(resource);
        const reservation = this.resourceReservations.get(resourceKey);
        return reservation ? reservation.unitId : null;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —é–Ω–∏—Ç–∞
     * @param {string} unitId - ID —é–Ω–∏—Ç–∞
     * @returns {Object|null} –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —é–Ω–∏—Ç–∞ –∏–ª–∏ null
     */
    getUnitAssignment(unitId) {
        const unitAssignment = this.unitAssignments.get(unitId);
        return unitAssignment ? unitAssignment.assignment : null;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–Ω–µ–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) —Ä–µ—Å—É—Ä—Å–æ–≤
     * @param {Array} resources - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Array} –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    getAvailableResources(resources) {
        return resources.filter(resource => !this.isResourceReserved(resource));
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    updateAssignments(analysis) {
        const currentTime = Date.now();
        const aliveUnitIds = new Set(analysis.units.myUnits.map(unit => unit.id));
        const availableResourceKeys = new Set(
            analysis.resources.visible.map(resource => this.getResourceKey(resource))
        );

        // –ù–∞–π—Ç–∏ –º–µ—Ä—Ç–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        for (const [unitId, unitAssignment] of this.unitAssignments) {
            if (!aliveUnitIds.has(unitId)) {
                logger.warn(`üíÄ Unit ${unitId} is dead, releasing its resource reservation`);
                this.releaseUnitAssignment(unitId);
                this.deadUnits.add(unitId);
            }
        }

        // –ù–∞–π—Ç–∏ –∏—Å—á–µ–∑–Ω—É–≤—à–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        for (const [resourceKey, reservation] of this.resourceReservations) {
            if (!availableResourceKeys.has(resourceKey)) {
                logger.warn(`üö´ Resource at ${resourceKey} no longer available, releasing reservation for unit ${reservation.unitId}`);
                this.releaseUnitAssignment(reservation.unitId);
            }
        }

        // –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        for (const [resourceKey, reservation] of this.resourceReservations) {
            if (currentTime - reservation.assignedAt > this.assignmentTimeout) {
                logger.warn(`‚è∞ Assignment for unit ${reservation.unitId} has timed out, releasing resource ${resourceKey}`);
                this.releaseUnitAssignment(reservation.unitId);
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.logAssignmentStats();
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã —é–Ω–∏—Ç–∞–º —Å –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
     * @param {Array} availableUnits - –î–æ—Å—Ç—É–ø–Ω—ã–µ —é–Ω–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     * @param {Array} availableResources - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
     * @param {Function} priorityCalculator - –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —é–Ω–∏—Ç–∞
     */
    reassignOrphanedResources(availableUnits, availableResources, priorityCalculator) {
        const unassignedUnits = availableUnits.filter(unit => !this.getUnitAssignment(unit.id));
        const availableResourcesList = this.getAvailableResources(availableResources);

        if (unassignedUnits.length === 0 || availableResourcesList.length === 0) {
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const resourcePriorities = availableResourcesList.map(resource => ({
            resource,
            bestUnit: null,
            bestPriority: 0
        }));

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
        resourcePriorities.forEach(resInfo => {
            unassignedUnits.forEach(unit => {
                const priority = priorityCalculator(unit, resInfo.resource);
                if (priority > resInfo.bestPriority) {
                    resInfo.bestPriority = priority;
                    resInfo.bestUnit = unit;
                }
            });
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º
        resourcePriorities
            .filter(resInfo => resInfo.bestUnit !== null)
            .sort((a, b) => b.bestPriority - a.bestPriority)
            .forEach(resInfo => {
                if (this.reserveResource(resInfo.bestUnit.id, resInfo.resource, resInfo.bestPriority)) {
                    logger.info(`üîÑ Reassigned unit ${resInfo.bestUnit.id} to resource at (${resInfo.resource.q}, ${resInfo.resource.r})`);
                }
            });
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    logAssignmentStats() {
        const reservationCount = this.resourceReservations.size;
        const assignmentCount = this.unitAssignments.size;
        
        if (reservationCount > 0 || assignmentCount > 0) {
            logger.debug(`üìä Resource assignments: ${assignmentCount} units assigned to ${reservationCount} resources`);
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (logger.level === 'DEBUG') {
                for (const [resourceKey, reservation] of this.resourceReservations) {
                    logger.debug(`  üéØ Resource ${resourceKey} -> Unit ${reservation.unitId} (priority: ${reservation.priority})`);
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    getReservedResources() {
        return Array.from(this.resourceReservations.entries()).map(([resourceKey, reservation]) => ({
            resourceKey,
            unitId: reservation.unitId,
            priority: reservation.priority,
            assignedAt: reservation.assignedAt
        }));
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
     */
    clearAllAssignments() {
        this.resourceReservations.clear();
        this.unitAssignments.clear();
        this.deadUnits.clear();
        logger.info('üßπ Cleared all resource assignments');
    }
}

module.exports = ResourceAssignmentManager;