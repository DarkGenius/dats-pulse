const logger = require('../utils/Logger');
const { 
    FOOD_TYPES, 
    UNIT_TYPES, 
    FOOD_TYPE_NAMES, 
    UNIT_TYPE_NAMES, 
    UNIT_STATS 
} = require('../constants/GameConstants');
const PathfindingValidator = require('./PathfindingValidator');
const AStarPathfinder = require('./AStarPathfinder');

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º —é–Ω–∏—Ç–æ–≤.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π.
 */
class UnitManager {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —é–Ω–∏—Ç–æ–≤ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –∏–≥—Ä—ã –∏ —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.
     */
    constructor() {
        this.unitStats = UNIT_STATS;
        this.foodTypes = FOOD_TYPES;
        this.unitTypes = UNIT_TYPES;
        this.foodTypeNames = FOOD_TYPE_NAMES;
        this.unitTypeNames = UNIT_TYPE_NAMES;
        
        this.movementQueue = [];
        this.unitAssignments = new Map();
        this.pathValidator = new PathfindingValidator();
        this.pathfinder = new AStarPathfinder();
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞.
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    planUnitActions(analysis, strategy, resourceAssignmentManager) {
        const moves = [];
        const myUnits = analysis.units.myUnits;
        
        this.clearOldAssignments();
        
        myUnits.forEach(unit => {
            const unitAction = this.planUnitAction(unit, analysis, strategy, resourceAssignmentManager);
            if (unitAction) {
                moves.push(unitAction);
                this.unitAssignments.set(unit.id, unitAction);
            }
        });

        return { moves };
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    planUnitAction(unit, analysis, strategy, resourceAssignmentManager) {
        // RECOVERY MODE: Emergency protocols override normal behavior
        if (strategy && strategy.recoveryMode) {
            return this.handleRecoveryModeUnit(unit, analysis, strategy, resourceAssignmentManager);
        }
        
        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const centralAssignment = resourceAssignmentManager.getUnitAssignment(unit.id);
        if (centralAssignment) {
            logger.info(`üéØ Unit ${unit.id} executing central assignment to collect ${centralAssignment.resourceType || 'resource'} at (${centralAssignment.target.q}, ${centralAssignment.target.r})`);
            const moveResult = this.executeResourceAssignment(unit, centralAssignment, analysis, resourceAssignmentManager);
            if (!moveResult) {
                // Path failed - release assignment and try again next turn
                logger.warn(`üö´ Releasing assignment for unit ${unit.id} due to pathfinding failure`);
                resourceAssignmentManager.releaseUnitAssignment(unit.id);
            }
            return moveResult;
        }
        
        // –ï—Å–ª–∏ —é–Ω–∏—Ç –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è,
        // –æ–Ω –∂–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç ResourceManager (–Ω–æ –Ω–µ —Å–æ–ª–¥–∞—Ç—ã!)
        if (unit.type !== this.unitTypes.SOLDIER && 
            this.canCollectResources(unit, analysis) && 
            this.hasAvailableResources(analysis)) {
            logger.info(`‚è≥ Unit ${unit.id} (${this.unitTypeNames[unit.type]}) waiting for resource assignment from central manager. Available resources: ${analysis.resources.visible.length}`);
            // Don't patrol - just stay still or return to base
            return null;
        }
        
        const existingAssignment = this.unitAssignments.get(unit.id);
        
        if (existingAssignment && this.shouldContinueAssignment(existingAssignment, analysis)) {
            return this.continueAssignment(unit, existingAssignment, analysis);
        }

        const newAssignment = this.assignNewTask(unit, analysis, strategy, resourceAssignmentManager);
        return newAssignment;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} assignment - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    executeResourceAssignment(unit, assignment, analysis, resourceAssignmentManager = null) {
        const target = assignment.target;
        const path = this.findPath(unit, target, analysis);
        
        if (path && path.length > 0) {
            logger.debug(`Unit ${unit.id} executing centralized resource assignment to (${target.q}, ${target.r})`);
            return {
                unit_id: unit.id,
                path: path,
                assignment: assignment
            };
        }
        
        logger.warn(`Unit ${unit.id} cannot path to assigned resource at (${target.q}, ${target.r})`);
        return null;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ —é–Ω–∏—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.
     * @param {Object} assignment - –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —é–Ω–∏—Ç–∞
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
     */
    shouldContinueAssignment(assignment, analysis) {
        if (assignment.type === 'resource_collection') {
            return this.isResourceStillAvailable(assignment.target, analysis);
        }
        
        if (assignment.type === 'combat') {
            return this.isTargetStillValid(assignment.target, analysis);
        }
        
        if (assignment.type === 'exploration') {
            return !this.isAreaExplored(assignment.target, analysis);
        }
        
        return false;
    }

    /**
     * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —é–Ω–∏—Ç–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} assignment - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    continueAssignment(unit, assignment, analysis) {
        const target = assignment.target;
        const path = this.findPath(unit, target, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: assignment
            };
        }
        
        return null;
    }

    /**
     * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —é–Ω–∏—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    assignNewTask(unit, analysis, strategy, resourceAssignmentManager) {
        const taskPriority = this.getTaskPriority(unit, analysis, strategy, resourceAssignmentManager);
        
        for (const task of taskPriority) {
            const action = this.executeTask(unit, task, analysis, strategy, resourceAssignmentManager);
            if (action) {
                return action;
            }
        }
        
        // Workers and scouts without assignments should not patrol
        // Only soldiers get defaultBehavior (patrol)
        if (unit.type === this.unitTypes.SOLDIER) {
            return this.defaultBehavior(unit, analysis);
        }
        
        // Non-combat units without tasks stay still
        return null;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á –¥–ª—è —é–Ω–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ –∏–≥—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
     */
    getTaskPriority(unit, analysis, strategy, resourceAssignmentManager) {
        const tasks = [];
        const phase = strategy.phase;
        const currentTurn = analysis.gameState?.turnNo || 0;
        
        // CRITICAL: Always check if unit needs to return to anthill first
        if (this.shouldReturnToAnthill(unit, analysis)) {
            tasks.push('return_to_anthill');
            return tasks; // Return immediately - this is the highest priority
        }
        
        // END-GAME HEURISTIC: If game is nearing end (turn 380+), restrict unit movement
        if (this.shouldRestrictMovementForEndGame(unit, analysis, currentTurn)) {
            // –í –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã —é–Ω–∏—Ç—ã –Ω–µ –±–µ—Ä—É—Ç –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            tasks.push('return_to_anthill');
            return tasks;
        }
        
        // CARGO-AWARE PRIORITIZATION: If unit is moderately loaded (50%+), avoid distractions
        const shouldAvoidDistractions = this.shouldAvoidDistractions(unit, analysis);
        
        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å–±–æ—Ä–∞
        // –Æ–Ω–∏—Ç—ã –ù–ï –ø–æ–ª—É—á–∞—é—Ç –ø—Ä—è–º—ã–µ –∑–∞–¥–∞—á–∏ nectar_collection, bread_collection, apple_collection
        logger.debug(`Unit ${unit.id}: Resource tasks managed by central assignment system`);
        
        // If unit should avoid distractions, only allow safe resource collection
        if (shouldAvoidDistractions) {
            logger.debug(`Unit ${unit.id} avoiding distractions due to moderate cargo load, focusing on safe resource collection`);
            const safeTasks = this.getSafeResourceTasks(unit, analysis, resourceAssignmentManager);
            if (safeTasks.length > 0) {
                return safeTasks;
            }
            // If no safe resource tasks, continue to anthill
            tasks.push('return_to_anthill');
            return tasks;
        }
        
        // Only proceed to other tasks if no nectar is available or unit cannot collect it
        
        // Always prioritize raiding enemy anthills if discovered
        if (this.hasDiscoveredEnemyAnthills(analysis)) {
            tasks.push('raid_enemy_anthill');
        }
        
        if (analysis.threats.immediateThreats.length > 0) {
            tasks.push('immediate_defense');
        }
        
        const unitTypeName = this.unitTypeNames[unit.type];
        
        if (unitTypeName === 'scout') {
            // Scouts prioritize systematic exploration and enemy base finding
            // They should avoid combat and focus on reconnaissance
            tasks.push('systematic_exploration', 'find_enemy_anthill', 'avoid_combat_exploration', 'resource_scouting');
            // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ä–µ—Å—É—Ä—Å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        } else if (unitTypeName === 'soldier') {
            // Soldiers should not get any tasks from UnitManager
            // Combat decisions are handled by CombatManager
            return [];
        } else if (unitTypeName === 'worker') {
            // Workers focus on support tasks, central manager handles resources
            tasks.push('assist_raid', 'construction');
        }
        
        if (phase === 'early') {
            tasks.push('resource_collection', 'aggressive_exploration');
        } else if (phase === 'mid') {
            tasks.push('find_enemy_anthill', 'territory_control', 'resource_optimization');
        } else if (phase === 'late') {
            tasks.push('raid_enemy_anthill', 'high_value_resources', 'enemy_disruption');
        }
        
        return tasks;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —é–Ω–∏—Ç–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {string} task - –¢–∏–ø –∑–∞–¥–∞—á–∏
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} strategy - –°—Ç—Ä–∞—Ç–µ–≥–∏—è
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    executeTask(unit, task, analysis, strategy, resourceAssignmentManager) {
        switch (task) {
            case 'return_to_anthill':
                return this.returnToAnthill(unit, analysis);
            case 'immediate_defense':
                return this.defendAnthill(unit, analysis);
            case 'nectar_collection':
                return this.collectNectar(unit, analysis, resourceAssignmentManager);
            case 'bread_collection':
                return this.collectBread(unit, analysis, resourceAssignmentManager);
            case 'apple_collection':
                return this.collectApples(unit, analysis, resourceAssignmentManager);
            case 'exploration':
                return this.exploreMap(unit, analysis);
            case 'aggressive_exploration':
                return this.aggressiveExploration(unit, analysis);
            case 'systematic_exploration':
                return this.systematicExploration(unit, analysis);
            case 'avoid_combat_exploration':
                return this.avoidCombatExploration(unit, analysis);
            case 'find_enemy_anthill':
                return this.findEnemyAnthill(unit, analysis);
            case 'raid_enemy_anthill':
                return this.raidEnemyAnthill(unit, analysis);
            // case 'hunt_enemies':
            //     return this.huntEnemies(unit, analysis);  // Combat handled by CombatManager
            case 'assist_raid':
                return this.assistRaid(unit, analysis);
            case 'combat':
                return this.engageCombat(unit, analysis);
            case 'convoy_protection':
                return this.protectConvoy(unit, analysis);
            case 'territory_defense':
                return this.defendTerritory(unit, analysis);
            case 'resource_scouting':
                return this.scoutResources(unit, analysis);
            default:
                return null;
        }
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞ –æ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑.
     * @param {Object} unit - –Æ–Ω–∏—Ç-–∑–∞—â–∏—Ç–Ω–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏–ª–∏ null
     */
    defendAnthill(unit, analysis) {
        const anthill = analysis.units.anthill;
        const immediateThreats = analysis.threats.immediateThreats;
        
        if (!anthill || immediateThreats.length === 0) {
            return null;
        }

        const nearestThreat = this.findNearestThreat(unit, immediateThreats);
        if (nearestThreat) {
            const interceptPoint = this.calculateInterceptPoint(unit, nearestThreat, anthill);
            const path = this.findPath(unit, interceptPoint, analysis);
            
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –ø—É—Ç—å, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —à–∞–≥
                    assignment: {
                        type: 'immediate_defense',
                        target: nearestThreat.unit,
                        priority: 'critical'
                    }
                };
            }
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–±–æ—Ä –Ω–µ–∫—Ç–∞—Ä–∞ - —Ä–µ—Å—É—Ä—Å–∞ —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Å–±–æ—Ä—â–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –Ω–µ–∫—Ç–∞—Ä—É –∏–ª–∏ null
     */
    collectNectar(unit, analysis, resourceAssignmentManager) {
        // RULE CHECK: –Æ–Ω–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if (unit.food && unit.food.amount > 0 && unit.food.type !== this.foodTypes.NECTAR) {
            logger.debug(`Unit ${unit.id} cannot collect nectar: already carrying ${this.foodTypeNames[unit.food.type] || unit.food.type} (${unit.food.amount} units)`);
            return null; // –£–∂–µ –Ω–µ—Å–µ—Ç –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ–∫—Ç–∞—Ä–∞
        if (!analysis.resources || !analysis.resources.byType) {
            logger.warn(`Unit ${unit.id}: No resources analysis available`);
            return null;
        }
        
        const nectarResources = analysis.resources.byType.nectar;
        if (!nectarResources) {
            logger.debug(`Unit ${unit.id}: No nectar array in analysis.resources.byType`);
            return null;
        }
        
        if (nectarResources.length === 0) {
            logger.debug(`Unit ${unit.id}: No nectar resources available (array empty)`);
            return null;
        }

        logger.debug(`Unit ${unit.id}: Found ${nectarResources.length} nectar resources available`);

        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Ä–µ—Å—É—Ä—Å–æ–≤
        const availableNectar = resourceAssignmentManager.getAvailableResources(nectarResources);

        if (availableNectar.length === 0) {
            logger.debug(`Unit ${unit.id}: No available nectar resources (all reserved)`);
            return null;
        }

        const nearestNectar = this.findNearestResource(unit, availableNectar);
        if (nearestNectar) {
            const distance = this.calculateDistance(unit, nearestNectar);
            logger.debug(`Unit ${unit.id}: Nearest nectar at (${nearestNectar.q}, ${nearestNectar.r}), distance: ${distance}`);
            
            const path = this.findPath(unit, nearestNectar, analysis);
            
            if (path && path.length > 0) {
                logger.info(`Unit ${unit.id}: Assigned to collect nectar at (${nearestNectar.q}, ${nearestNectar.r})`);
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'resource_collection',
                        target: nearestNectar,
                        resource_type: this.foodTypes.NECTAR,
                        priority: 'high'
                    }
                };
            } else {
                logger.warn(`Unit ${unit.id}: No valid path to nectar at (${nearestNectar.q}, ${nearestNectar.r})`);
            }
        } else {
            logger.warn(`Unit ${unit.id}: Could not find nearest nectar from ${availableNectar.length} available`);
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–±–æ—Ä —Ö–ª–µ–±–∞ - —Ä–µ—Å—É—Ä—Å–∞ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Å–±–æ—Ä—â–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ö–ª–µ–±—É –∏–ª–∏ null
     */
    collectBread(unit, analysis, resourceAssignmentManager) {
        // RULE CHECK: –Æ–Ω–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if (unit.food && unit.food.amount > 0 && unit.food.type !== this.foodTypes.BREAD) {
            return null; // –£–∂–µ –Ω–µ—Å–µ—Ç –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
        }
        
        const breadResources = analysis.resources.byType.bread;
        if (breadResources.length === 0) {
            return null;
        }

        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Ä–µ—Å—É—Ä—Å–æ–≤
        const availableBread = resourceAssignmentManager.getAvailableResources(breadResources);

        if (availableBread.length === 0) {
            logger.debug(`Unit ${unit.id}: No available bread resources (all reserved)`);
            return null;
        }

        const nearestBread = this.findNearestResource(unit, availableBread);
        if (nearestBread) {
            const path = this.findPath(unit, nearestBread, analysis);
            
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'resource_collection',
                        target: nearestBread,
                        resource_type: this.foodTypes.BREAD,
                        priority: 'medium'
                    }
                };
            }
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–±–æ—Ä —è–±–ª–æ–∫ - —Ä–µ—Å—É—Ä—Å–∞ —Å –Ω–∏–∑–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Å–±–æ—Ä—â–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —è–±–ª–æ–∫–∞–º –∏–ª–∏ null
     */
    collectApples(unit, analysis, resourceAssignmentManager) {
        // RULE CHECK: –Æ–Ω–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if (unit.food && unit.food.amount > 0 && unit.food.type !== this.foodTypes.APPLE) {
            return null; // –£–∂–µ –Ω–µ—Å–µ—Ç –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
        }
        
        const appleResources = analysis.resources.byType.apple;
        if (appleResources.length === 0) {
            return null;
        }

        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Ä–µ—Å—É—Ä—Å–æ–≤
        const availableApples = resourceAssignmentManager.getAvailableResources(appleResources);

        if (availableApples.length === 0) {
            logger.debug(`Unit ${unit.id}: No available apple resources (all reserved)`);
            return null;
        }

        const nearestApple = this.findNearestResource(unit, availableApples);
        if (nearestApple) {
            const path = this.findPath(unit, nearestApple, analysis);
            
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'resource_collection',
                        target: nearestApple,
                        resource_type: this.foodTypes.APPLE,
                        priority: 'low'
                    }
                };
            }
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ null
     */
    exploreMap(unit, analysis) {
        const explorationTargets = this.generateExplorationTargets(unit, analysis);
        
        if (explorationTargets.length === 0) {
            return null;
        }

        const bestTarget = explorationTargets[0];
        const path = this.findPath(unit, bestTarget, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'exploration',
                    target: bestTarget,
                    priority: 'medium'
                }
            };
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –±–æ–µ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤—Ä–∞–∂–µ—Å–∫–∏–º–∏ —é–Ω–∏—Ç–∞–º–∏.
     * @param {Object} unit - –ë–æ–µ–≤–æ–π —é–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏ –∞—Ç–∞–∫–∏ –∏–ª–∏ null
     */
    engageCombat(unit, analysis) {
        const combatTargets = analysis.threats.threats;
        if (combatTargets.length === 0) {
            return null;
        }

        const viableTargets = combatTargets.filter(threat => 
            this.canEngageThreat(unit, threat, analysis)
        );

        if (viableTargets.length === 0) {
            return null;
        }

        const bestTarget = viableTargets[0];
        const path = this.findPath(unit, bestTarget.unit, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'combat',
                    target: bestTarget.unit,
                    priority: 'high'
                }
            };
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É —Ä–∞–±–æ—á–∏—Ö —é–Ω–∏—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç-–æ—Ö—Ä–∞–Ω–Ω–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–ª–∏ null
     */
    protectConvoy(unit, analysis) {
        const workers = analysis.units.myUnits.filter(u => u.type === 'worker');
        const vulnerableWorkers = workers.filter(worker => 
            this.isWorkerVulnerable(worker, analysis)
        );

        if (vulnerableWorkers.length === 0) {
            return null;
        }

        const workerToProtect = vulnerableWorkers[0];
        const protectionPosition = this.calculateProtectionPosition(unit, workerToProtect, analysis);
        const path = this.findPath(unit, protectionPosition, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'convoy_protection',
                    target: workerToProtect,
                    priority: 'medium'
                }
            };
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —É–≥—Ä–æ–∑.
     * @param {Object} unit - –ü–∞—Ç—Ä—É–ª—å–Ω—ã–π —é–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ null
     */
    defendTerritory(unit, analysis) {
        // CRITICAL FIX: Soldiers should patrol even without visible threats
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        // Generate patrol points around the anthill
        const patrolRadius = 10;
        const patrolPoints = [];
        
        // Create a ring of patrol points around the anthill
        for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 4) {
            const q = Math.round(anthill.q + Math.cos(angle) * patrolRadius);
            const r = Math.round(anthill.r + Math.sin(angle) * patrolRadius);
            patrolPoints.push({ q, r });
        }
        
        // Find the farthest patrol point from current position to ensure movement
        let farthestPoint = null;
        let maxDistance = 0;
        
        patrolPoints.forEach(point => {
            const distance = this.calculateDistance(unit, point);
            if (distance > maxDistance) {
                maxDistance = distance;
                farthestPoint = point;
            }
        });
        
        if (farthestPoint) {
            const path = this.findPath(unit, farthestPoint, analysis);
            
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'territory_defense',
                        target: farthestPoint,
                        priority: 'medium'
                    }
                };
            }
        }
        
        return null;
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ–¥–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –Ω–µ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏ —Ä–∞–∑–≤–µ–¥–∫–∏ –∏–ª–∏ null
     */
    scoutResources(unit, analysis) {
        const unexploredAreas = this.identifyUnexploredAreas(analysis);
        const resourceHotspots = this.identifyResourceHotspots(analysis);
        
        const scoutingTargets = [...unexploredAreas, ...resourceHotspots];
        
        if (scoutingTargets.length === 0) {
            return null;
        }

        const bestTarget = scoutingTargets[0];
        const path = this.findPath(unit, bestTarget, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'resource_scouting',
                    target: bestTarget,
                    priority: 'medium'
                }
            };
        }
        
        return null;
    }

    /**
     * –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –∏–ª–∏ null
     */
    defaultBehavior(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) {
            return null;
        }

        const randomNearbyPoint = this.getRandomNearbyPoint(anthill, 5);
        const path = this.findPath(unit, randomNearbyPoint, analysis);
        
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'patrol',
                    target: randomNearbyPoint,
                    priority: 'low'
                }
            };
        }
        
        return null;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –æ—Ç —é–Ω–∏—Ç–∞ –∫ —Ü–µ–ª–∏ —Å —É—á—ë—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∏–≥—Ä–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
     * @param {Object} unit - –ò—Å—Ö–æ–¥–Ω—ã–π —é–Ω–∏—Ç
     * @param {Object} target - –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array|null} –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏ –∏–ª–∏ null
     */
    findPath(unit, target, analysis) {
        if (!unit || !target) {
            return null;
        }

        // CRITICAL FIX: Use A* pathfinding instead of simple direct path
        // Create walkability check function
        const isWalkable = (pos) => {
            return this.pathValidator.validatePosition(pos, analysis.gameState);
        };

        // Calculate maximum search distance based on unit speed and remaining moves
        const unitSpeed = this.getUnitSpeed(unit.type);
        // Increase search distance for recovery mode or long-range pathfinding
        const distance = this.calculateDistance(unit, target);
        const baseSearchDistance = Math.min(200, unitSpeed * 15); // Increased base distance
        const maxSearchDistance = Math.max(baseSearchDistance, distance + 10); // Ensure we can reach the target

        // Try A* pathfinding
        let path = this.pathfinder.findPath(unit, target, isWalkable, maxSearchDistance);
        
        // If direct path fails, try using pathValidator alternative path
        if (!path || path.length === 0) {
            logger.debug(`A* direct path failed for unit ${unit.id} to (${target.q}, ${target.r}), trying PathValidator alternative`);
            path = this.pathValidator.findAlternativePath(unit, target, analysis.gameState);
        }

        if (path && path.length > 0) {
            // Additional safety check
            const safetyCheckedPath = this.verifySafety(path, analysis);
            if (safetyCheckedPath && safetyCheckedPath.length > 0) {
                logger.debug(`A* path found for unit ${unit.id}: ${path.length} steps to (${target.q}, ${target.r})`);
                return safetyCheckedPath;
            }
        }

        // No fallback - if A* can't find a path, it means there's no valid path
        logger.debug(`No valid path found for unit ${unit.id} to target (${target.q}, ${target.r})`);
        return null;
    }

    // DEPRECATED: Direct path calculation replaced by A* pathfinding
    /*
    calculateDirectPath(start, end) {
        if (!start || !end) return [];
        
        const distance = this.calculateDistance(start, end);
        if (distance === 0) return [];

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –ø–æ —à–∞–≥–∞–º
        // –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Å–µ–¥–Ω–∏–µ –≥–µ–∫—Å—ã
        const path = [];
        let current = { q: start.q, r: start.r };
        
        for (let i = 0; i < distance && i < 10; i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—É—Ç–∏
            const nextStep = this.getNextStepTowards(current, end);
            if (!nextStep) break;
            
            path.push(nextStep);
            current = nextStep;
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if (current.q === end.q && current.r === end.r) {
                break;
            }
        }
        
        return path;
    }
    */

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
     * @param {Object} from - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Object} to - –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @returns {Object|null} –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ null
     */
    getNextStepTowards(from, to) {
        const dq = to.q - from.q;
        const dr = to.r - from.r;
        const ds = (-dq - dr);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        let stepQ = 0;
        let stepR = 0;
        
        if (Math.abs(dq) >= Math.abs(dr) && Math.abs(dq) >= Math.abs(ds)) {
            // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Q
            stepQ = Math.sign(dq);
            if (dr !== 0) {
                stepR = Math.sign(dr);
            }
        } else if (Math.abs(dr) >= Math.abs(ds)) {
            // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ—Å–∏ R
            stepR = Math.sign(dr);
            if (dq !== 0) {
                stepQ = Math.sign(dq);
            }
        } else {
            // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ—Å–∏ S (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
            if (dq !== 0) stepQ = -Math.sign(ds);
            if (dr !== 0) stepR = -Math.sign(ds);
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–º –≥–µ–∫—Å–µ
        if (Math.abs(stepQ) + Math.abs(stepR) > 1) {
            // –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if (Math.abs(dq) > Math.abs(dr)) {
                stepR = 0;
            } else {
                stepQ = 0;
            }
        }
        
        if (stepQ === 0 && stepR === 0) {
            return null;
        }
        
        return {
            q: from.q + stepQ,
            r: from.r + stepR
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ–ø–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏.
     * @param {Array} path - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array} –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –æ–ø–∞—Å–Ω—ã
     */
    verifySafety(path, analysis) {
        const threats = analysis.threats.threats;
        const safetyRadius = 2;
        
        const safePath = path.filter(point => {
            const nearbyThreats = threats.filter(threat => 
                this.calculateDistance(point, threat.unit) <= safetyRadius
            );
            return nearbyThreats.length === 0;
        });
        
        return safePath.length > 0 ? safePath : path;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ—Å—É—Ä—Å –∫ —é–Ω–∏—Ç—É.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Array} resources - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Object|null} –ë–ª–∏–∂–∞–π—à–∏–π —Ä–µ—Å—É—Ä—Å –∏–ª–∏ null
     */
    findNearestResource(unit, resources) {
        if (resources.length === 0) {
            return null;
        }

        const resourcesWithDistance = resources.map(resource => ({
            resource,
            distance: this.calculateDistance(unit, resource)
        }));

        resourcesWithDistance.sort((a, b) => a.distance - b.distance);
        return resourcesWithDistance[0].resource;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —É–≥—Ä–æ–∑—É –∫ —é–Ω–∏—Ç—É.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Array} threats - –ú–∞—Å—Å–∏–≤ —É–≥—Ä–æ–∑
     * @returns {Object|null} –ë–ª–∏–∂–∞–π—à–∞—è —É–≥—Ä–æ–∑–∞ –∏–ª–∏ null
     */
    findNearestThreat(unit, threats) {
        if (threats.length === 0) {
            return null;
        }

        const threatsWithDistance = threats.map(threat => ({
            threat,
            distance: this.calculateDistance(unit, threat.unit)
        }));

        threatsWithDistance.sort((a, b) => a.distance - b.distance);
        return threatsWithDistance[0].threat;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –ø–æ–∑–∏—Ü–∏—é –∫ —é–Ω–∏—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Array} positions - –ú–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π
     * @returns {Object|null} –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ null
     */
    findNearestPosition(unit, positions) {
        if (positions.length === 0) {
            return null;
        }

        const positionsWithDistance = positions.map(pos => ({
            position: pos,
            distance: this.calculateDistance(unit, pos)
        }));

        positionsWithDistance.sort((a, b) => a.distance - b.distance);
        return positionsWithDistance[0].position;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–¥–∏—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —é–Ω–∏—Ç–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ü–µ–ª–µ–π –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
     */
    generateExplorationTargets(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) {
            return [];
        }

        const targets = [];
        const unitStats = this.unitStats[unit.type];
        
        if (!unitStats) {
            logger.warn(`Unknown unit type ${unit.type} for unit ${unit.id}, skipping exploration`);
            return [];
        }
        
        const vision = unitStats.vision;
        
        for (let radius = vision; radius <= vision * 3; radius += vision) {
            const ringTargets = this.generateRingPositions(anthill, radius);
            targets.push(...ringTargets);
        }

        return targets.filter(target => 
            !this.isPositionExplored(target, analysis)
        );
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫–æ–ª—å—Ü–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
     * @param {Object} center - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ q, r
     * @param {number} radius - –†–∞–¥–∏—É—Å –∫–æ–ª—å—Ü–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∫–æ–ª—å—Ü–µ
     */
    generateRingPositions(center, radius) {
        const positions = [];
        const directions = [
            { dq: 1, dr: 0 }, { dq: 1, dr: -1 }, { dq: 0, dr: -1 },
            { dq: -1, dr: 0 }, { dq: -1, dr: 1 }, { dq: 0, dr: 1 }
        ];

        directions.forEach(dir => {
            positions.push({
                q: center.q + dir.dq * radius,
                r: center.r + dir.dr * radius
            });
        });

        return positions;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —É–≥—Ä–æ–∑—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞.
     * @param {Object} unit - –Æ–Ω–∏—Ç-–∑–∞—â–∏—Ç–Ω–∏–∫
     * @param {Object} threat - –£–≥—Ä–æ–∑–∞
     * @param {Object} anthill - –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫
     * @returns {Object} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
     */
    calculateInterceptPoint(unit, threat, anthill) {
        const threatToAnthill = {
            q: anthill.q - threat.unit.q,
            r: anthill.r - threat.unit.r
        };

        const interceptQ = threat.unit.q + threatToAnthill.q * 0.5;
        const interceptR = threat.unit.r + threatToAnthill.r * 0.5;

        return {
            q: Math.round(interceptQ),
            r: Math.round(interceptR)
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ —é–Ω–∏—Ç–∞.
     * @param {Object} guard - –Æ–Ω–∏—Ç-–æ—Ö—Ä–∞–Ω–Ω–∏–∫
     * @param {Object} worker - –ó–∞—â–∏—â–∞–µ–º—ã–π —Ä–∞–±–æ—á–∏–π
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—â–∏—Ç—ã
     */
    calculateProtectionPosition(guard, worker, analysis) {
        const threats = analysis.threats.threats;
        
        if (threats.length === 0) {
            return {
                q: worker.q + 1,
                r: worker.r
            };
        }

        const nearestThreat = this.findNearestThreat(worker, threats);
        if (nearestThreat) {
            const threatToWorker = {
                q: worker.q - nearestThreat.threat.unit.q,
                r: worker.r - nearestThreat.threat.unit.r
            };

            return {
                q: worker.q + Math.sign(threatToWorker.q),
                r: worker.r + Math.sign(threatToWorker.r)
            };
        }

        return {
            q: worker.q + 1,
            r: worker.r
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞.
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    generatePatrolPoints(analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) {
            return [];
        }

        const patrolRadius = 8;
        return this.generateRingPositions(anthill, patrolRadius);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã.
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–µ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    identifyUnexploredAreas(analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) {
            return [];
        }

        const unexplored = [];
        // Increased search radius for aggressive exploration
        const searchRadius = 50;
        
        // Use spiral pattern for better exploration coverage
        const spiralPoints = this.generateSpiralPattern(anthill, searchRadius);
        
        for (const point of spiralPoints) {
            if (!this.isPositionExplored(point, analysis)) {
                unexplored.push(point);
            }
        }

        return unexplored;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
     */
    identifyResourceHotspots(analysis) {
        const resources = analysis.resources.visible;
        const hotspots = [];

        const clusters = this.clusterResources(resources);
        clusters.forEach(cluster => {
            hotspots.push({
                q: Math.round(cluster.centerQ),
                r: Math.round(cluster.centerR),
                value: cluster.totalValue
            });
        });

        return hotspots.sort((a, b) => b.value - a.value);
    }

    /**
     * –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π.
     * @param {Array} resources - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∞–º–∏ –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
     */
    clusterResources(resources) {
        const clusters = [];
        const visited = new Set();

        resources.forEach((resource, index) => {
            if (visited.has(index)) {
                return;
            }

            const cluster = {
                resources: [resource],
                centerQ: resource.q,
                centerR: resource.r,
                totalValue: this.getResourceValue(resource)
            };

            visited.add(index);

            resources.forEach((otherResource, otherIndex) => {
                if (visited.has(otherIndex)) {
                    return;
                }

                const distance = this.calculateDistance(resource, otherResource);
                if (distance <= 5) {
                    cluster.resources.push(otherResource);
                    cluster.totalValue += this.getResourceValue(otherResource);
                    visited.add(otherIndex);
                }
            });

            if (cluster.resources.length > 1) {
                cluster.centerQ = cluster.resources.reduce((sum, r) => sum + r.q, 0) / cluster.resources.length;
                cluster.centerR = cluster.resources.reduce((sum, r) => sum + r.r, 0) / cluster.resources.length;
                clusters.push(cluster);
            }
        });

        return clusters;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞.
     * @param {Object} resource - –†–µ—Å—É—Ä—Å —Å —Ç–∏–ø–æ–º
     * @returns {number} –ö–∞–ª–æ—Ä–∏–π–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
     */
    getResourceValue(resource) {
        const { FOOD_CALORIES } = require('../constants/GameConstants');
        return FOOD_CALORIES[resource.type] || 0;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.
     * @param {Object} center - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {number} radius - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
     * @returns {Object} –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ q, r
     */
    getRandomNearbyPoint(center, radius) {
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * radius;
        
        return {
            q: Math.round(center.q + Math.cos(angle) * distance),
            r: Math.round(center.r + Math.sin(angle) * distance)
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –µ—â—ë —Ä–µ—Å—É—Ä—Å –Ω–∞ –∫–∞—Ä—Ç–µ.
     * @param {Object} resource - –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ä–µ—Å—É—Ä—Å
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –µ—â—ë –¥–æ—Å—Ç—É–ø–µ–Ω
     */
    isResourceStillAvailable(resource, analysis) {
        return analysis.resources.visible.some(r => 
            r.q === resource.q && r.r === resource.r && r.type === resource.type
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞—ë—Ç—Å—è –ª–∏ —Ü–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–∞–∂–µ—Å–∫–∏–π —é–Ω–∏—Ç).
     * @param {Object} target - –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è —Ü–µ–ª—å
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —Ü–µ–ª—å –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
     */
    isTargetStillValid(target, analysis) {
        return analysis.units.enemyUnits.some(enemy => 
            enemy.q === target.q && enemy.r === target.r
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –ª–∏ –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–∏. –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.
     * @param {Object} target - –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} –í—Å–µ–≥–¥–∞ false (–∑–∞–≥–ª—É—à–∫–∞)
     */
    isAreaExplored(target, analysis) {
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è. –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.
     * @param {Object} position - –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} –í—Å–µ–≥–¥–∞ false (–∑–∞–≥–ª—É—à–∫–∞)
     */
    isPositionExplored(position, analysis) {
        return false;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —é–Ω–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å —É–≥—Ä–æ–∑–æ–π.
     * @param {Object} unit - –ù–∞–ø–∞–¥–∞—é—â–∏–π —é–Ω–∏—Ç
     * @param {Object} threat - –£–≥—Ä–æ–∑–∞
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —é–Ω–∏—Ç –º–æ–∂–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –±–æ—Ä–æ—Ç—å—Å—è —Å —É–≥—Ä–æ–∑–æ–π
     */
    canEngageThreat(unit, threat, analysis) {
        const unitStats = this.unitStats[unit.type];
        if (!unitStats) {
            logger.warn(`Unknown unit type ${unit.type} for unit ${unit.id}, using default attack`);
            return 10; // Default attack value
        }
        const unitStrength = unitStats.attack;
        const threatStrength = this.unitStats[threat.unit.type]?.attack || 50;
        
        return unitStrength >= threatStrength * 0.7;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–∞–±–æ—á–∏–π —é–Ω–∏—Ç –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
     * @param {Object} worker - –†–∞–±–æ—á–∏–π —é–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —Ä–∞–±–æ—á–∏–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∑–∞—â–∏—Ç–µ
     */
    isWorkerVulnerable(worker, analysis) {
        const nearbyThreats = analysis.threats.threats.filter(threat => 
            this.calculateDistance(worker, threat.unit) <= 5
        );
        
        const nearbyAllies = analysis.units.myUnits.filter(ally => 
            ally.type === this.unitTypes.SOLDIER && this.calculateDistance(worker, ally) <= 3
        );
        
        return nearbyThreats.length > 0 && nearbyAllies.length === 0;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —é–Ω–∏—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ª–∏–º–∏—Ç—É.
     */
    clearOldAssignments() {
        const currentTime = Date.now();
        const maxAge = 30000;
        
        for (const [unitId, assignment] of this.unitAssignments) {
            if (currentTime - assignment.timestamp > maxAge) {
                this.unitAssignments.delete(unitId);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —é–Ω–∏—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω)
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @returns {boolean} true, –µ—Å–ª–∏ —é–Ω–∏—Ç –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
     */
    canCollectResources(unit, analysis) {
        // –Æ–Ω–∏—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫—É, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ 80%+
        if (this.shouldReturnToAnthill(unit, analysis)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å
        const unitTypeName = this.unitTypeNames[unit.type];
        const maxCapacity = this.getUnitCargoCapacity(unitTypeName);
        const currentCargo = unit.food?.amount || 0;
        
        // –ú–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
        return currentCargo < maxCapacity;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Å–±–æ—Ä–∞
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
     */
    hasAvailableResources(analysis) {
        return analysis.resources && 
               analysis.resources.visible && 
               analysis.resources.visible.length > 0;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
     * @param {Object} pos1 - –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ q, r
     * @param {Object} pos2 - –í—Ç–æ—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ q, r
     * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö –∏–ª–∏ Infinity –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    calculateDistance(pos1, pos2) {
        if (!pos1 || !pos2) return Infinity;
        
        // –ì–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (q, r)
        const q1 = pos1.q || 0;
        const r1 = pos1.r || 0;
        const s1 = -q1 - r1;
        
        const q2 = pos2.q || 0;
        const r2 = pos2.r || 0;
        const s2 = -q2 - r2;
        
        return Math.max(Math.abs(q1 - q2), Math.abs(r1 - r2), Math.abs(s1 - s2));
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Ä–∞–ª–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.
     * @param {Object} center - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–º—É—Ä–∞–≤–µ–π–Ω–∏–∫)
     * @param {number} maxRadius - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Å–ø–∏—Ä–∞–ª–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Ä–∞–ª–∏
     */
    generateSpiralPattern(center, maxRadius) {
        const points = [];
        const directions = [
            { q: 1, r: 0 },   // right
            { q: 0, r: 1 },   // down-right
            { q: -1, r: 1 },  // down-left
            { q: -1, r: 0 },  // left
            { q: 0, r: -1 },  // up-left
            { q: 1, r: -1 }   // up-right
        ];
        
        let q = center.q;
        let r = center.r;
        points.push({ q, r });
        
        for (let radius = 1; radius <= maxRadius; radius++) {
            // Move to the starting position of this ring
            q = center.q + radius;
            r = center.r;
            
            // Traverse each side of the hexagonal ring
            for (let dir = 0; dir < 6; dir++) {
                for (let step = 0; step < radius; step++) {
                    points.push({ q, r });
                    // Move in current direction
                    q += directions[dir].q;
                    r += directions[dir].r;
                }
            }
        }
        
        return points;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∏.
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Ä–∞–∂–µ—Å–∫–∏–µ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∏
     */
    hasDiscoveredEnemyAnthills(analysis) {
        if (!analysis.gameState || !analysis.gameState.discoveredEnemyAnthills) {
            return false;
        }
        return analysis.gameState.discoveredEnemyAnthills.length > 0;
    }
    
    /**
     * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞–≥–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    aggressiveExploration(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        // Explore in expanding circles, prioritizing unexplored distant areas
        const maxDistance = 50;
        const currentDistance = this.calculateDistance(unit, anthill);
        
        // If unit is close to home, send it far
        let targetDistance = currentDistance < 15 ? 30 : currentDistance + 10;
        targetDistance = Math.min(targetDistance, maxDistance);
        
        // Generate target in a random direction at target distance
        const angle = Math.random() * Math.PI * 2;
        const target = {
            q: Math.round(anthill.q + Math.cos(angle) * targetDistance),
            r: Math.round(anthill.r + Math.sin(angle) * targetDistance)
        };
        
        const path = this.findPath(unit, target, analysis);
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'aggressive_exploration',
                    target: target,
                    priority: 'high'
                }
            };
        }
        
        return null;
    }
    
    /**
     * –ò—â–µ—Ç –≤—Ä–∞–∂–µ—Å–∫–∏–µ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∏.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    findEnemyAnthill(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        // Scout in systematic grid pattern to find enemy bases
        const gridSize = 20;
        const maxSearchRadius = 60;
        
        // Calculate grid position to explore
        const gridX = Math.floor(unit.q / gridSize) * gridSize;
        const gridY = Math.floor(unit.r / gridSize) * gridSize;
        
        // Find unexplored grid cells
        const unexploredGrids = [];
        for (let dx = -3; dx <= 3; dx++) {
            for (let dy = -3; dy <= 3; dy++) {
                const target = {
                    q: gridX + dx * gridSize,
                    r: gridY + dy * gridSize
                };
                
                const distance = this.calculateDistance(anthill, target);
                if (distance <= maxSearchRadius && !this.isPositionExplored(target, analysis)) {
                    unexploredGrids.push(target);
                }
            }
        }
        
        if (unexploredGrids.length > 0) {
            // Sort by distance from home (explore far areas first)
            unexploredGrids.sort((a, b) => {
                const distA = this.calculateDistance(anthill, a);
                const distB = this.calculateDistance(anthill, b);
                return distB - distA;
            });
            
            const target = unexploredGrids[0];
            const path = this.findPath(unit, target, analysis);
            
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'find_enemy_anthill',
                        target: target,
                        priority: 'high'
                    }
                };
            }
        }
        
        // If no grid cells to explore, do aggressive exploration
        return this.aggressiveExploration(unit, analysis);
    }
    
    /**
     * –ê—Ç–∞–∫—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –≤—Ä–∞–∂–µ—Å–∫–∏–π –º—É—Ä–∞–≤–µ–π–Ω–∏–∫.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    raidEnemyAnthill(unit, analysis) {
        // Check if we have discovered enemy anthills
        const enemyAnthills = analysis.gameState?.discoveredEnemyAnthills || [];
        if (enemyAnthills.length === 0) {
            // Check enemies array for anthills (type 0)
            const enemyAnthillsFromEnemies = (analysis.gameState?.enemies || [])
                .filter(enemy => enemy.type === 0);
            
            if (enemyAnthillsFromEnemies.length > 0) {
                enemyAnthills.push(...enemyAnthillsFromEnemies);
            }
        }
        
        if (enemyAnthills.length === 0) return null;
        
        // Analyze feasibility of raiding each enemy anthill
        const raidOpportunities = enemyAnthills.map(anthill => 
            this.analyzeRaidFeasibility(unit, anthill, analysis)
        ).filter(opportunity => opportunity.feasible);
        
        if (raidOpportunities.length === 0) {
            logger.debug(`Unit ${unit.id}: No feasible enemy anthill raids available`);
            return null;
        }
        
        // Sort by raid score (higher is better)
        raidOpportunities.sort((a, b) => b.score - a.score);
        const bestTarget = raidOpportunities[0];
        
        logger.info(`Unit ${unit.id}: Initiating raid on enemy anthill at (${bestTarget.anthill.q}, ${bestTarget.anthill.r}) - Score: ${bestTarget.score.toFixed(2)}`);
        
        const path = this.findPath(unit, bestTarget.anthill, analysis);
        if (path && path.length > 0) {
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'raid_enemy_anthill',
                    target: bestTarget.anthill,
                    priority: 'critical',
                    raidScore: bestTarget.score
                }
            };
        }
        
        return null;
    }
    
    /**
     * –û—Ö–æ—Ç–∏—Ç—Å—è –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Å–æ–ª–¥–∞—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    huntEnemies(unit, analysis) {
        const enemies = analysis.units.enemyUnits || [];
        if (enemies.length === 0) {
            // No visible enemies, explore aggressively to find them
            return this.aggressiveExploration(unit, analysis);
        }
        
        // Prioritize enemy workers and scouts
        const priorityTargets = enemies.filter(enemy => 
            enemy.type === this.unitTypes.WORKER || enemy.type === this.unitTypes.SCOUT
        );
        
        const targets = priorityTargets.length > 0 ? priorityTargets : enemies;
        const nearestTarget = this.findNearestPosition(unit, targets);
        
        if (nearestTarget) {
            const path = this.findPath(unit, nearestTarget, analysis);
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'hunt_enemies',
                        target: nearestTarget,
                        priority: 'high'
                    }
                };
            }
        }
        
        return null;
    }
    
    /**
     * –ü–æ–º–æ–≥–∞–µ—Ç –≤ —Ä–µ–π–¥–µ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–∏–π –º—É—Ä–∞–≤–µ–π–Ω–∏–∫ (–¥–ª—è —Ä–∞–±–æ—á–∏—Ö).
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–±–æ—á–∏–π
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    assistRaid(unit, analysis) {
        // Check if any soldiers are raiding
        const raidingSoldiers = analysis.units.myUnits.filter(u => {
            const assignment = this.unitAssignments.get(u.id);
            return assignment && assignment.assignment?.type === 'raid_enemy_anthill';
        });
        
        if (raidingSoldiers.length === 0) return null;
        
        // Follow the nearest raiding soldier
        const nearestRaider = this.findNearestPosition(unit, raidingSoldiers);
        if (!nearestRaider) return null;
        
        // Stay close but not too close
        const followDistance = 3;
        const currentDistance = this.calculateDistance(unit, nearestRaider);
        
        if (currentDistance > followDistance) {
            const path = this.findPath(unit, nearestRaider, analysis);
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'assist_raid',
                        target: nearestRaider,
                        priority: 'medium'
                    }
                };
            }
        }
        
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —é–Ω–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫—É –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —é–Ω–∏—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫—É
     */
    shouldReturnToAnthill(unit, analysis) {
        if (!unit.food || !unit.food.amount) {
            return false; // No cargo
        }
        
        const unitTypeName = this.unitTypeNames[unit.type];
        const maxCapacity = this.getUnitCargoCapacity(unitTypeName);
        const currentCargo = unit.food.amount;
        const cargoPercentage = (currentCargo / maxCapacity) * 100;
        
        // Return when cargo is 80% full or more, or when carrying high-value resources
        const cargoThreshold = maxCapacity * 0.8;
        const isNearlyFull = currentCargo >= cargoThreshold;
        
        // Always return immediately if carrying nectar (most valuable resource)
        const hasNectar = unit.food.type === this.foodTypes.NECTAR;
        
        // Log cargo status for debugging
        const resourceType = this.foodTypeNames[unit.food.type] || unit.food.type;
        logger.debug(`Unit ${unit.id} cargo check: ${currentCargo}/${maxCapacity} (${cargoPercentage.toFixed(1)}%) of ${resourceType}`);
        
        if (hasNectar) {
            logger.info(`Unit ${unit.id} must return to anthill: carrying valuable nectar (${currentCargo} units)`);
            return true;
        }
        
        if (isNearlyFull) {
            logger.info(`Unit ${unit.id} must return to anthill: cargo nearly full (${cargoPercentage.toFixed(1)}%)`);
            return true;
        }
        
        return false;
    }
    
    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —é–Ω–∏—Ç–∞ –∫ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫—É –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç —Å –≥—Ä—É–∑–æ–º
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫—É –∏–ª–∏ null
     */
    returnToAnthill(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) {
            logger.warn(`Unit ${unit.id} needs to return but no anthill found`);
            return null;
        }
        
        // Check if unit is already at anthill
        const distanceToAnthill = this.calculateDistance(unit, anthill);
        if (distanceToAnthill === 0 && unit.food && unit.food.amount > 0) {
            // Unit has reached anthill and can unload resources
            const cargoValue = this.calculateCargoValue(unit);
            const resourceType = this.foodTypeNames[unit.food.type] || unit.food.type;
            const cargoAmount = unit.food.amount;
            
            logger.info(`üè† Unit ${unit.id} has reached anthill and unloaded ${cargoAmount} units of ${resourceType} (${cargoValue} calories total)`);
            
            // Note: The actual unloading will happen automatically when the unit steps on the anthill hex
            // We just log this event for tracking purposes
        }
        
        // Calculate path to anthill
        const path = this.findPath(unit, anthill, analysis);
        if (path && path.length > 0) {
            const cargoValue = this.calculateCargoValue(unit);
            const resourceType = this.foodTypeNames[unit.food.type] || unit.food.type;
            const cargoAmount = unit.food.amount;
            
            logger.info(`üì¶ Unit ${unit.id} heading to anthill to unload ${cargoAmount} units of ${resourceType} (${cargoValue} calories), distance: ${distanceToAnthill} hexes`);
            
            return {
                unit_id: unit.id,
                path: path,
                assignment: {
                    type: 'return_to_anthill',
                    target: anthill,
                    priority: 'critical',
                    cargoValue: cargoValue,
                    cargoType: resourceType,
                    cargoAmount: cargoAmount
                }
            };
        }
        
        logger.warn(`Unit ${unit.id} cannot find path to anthill (distance: ${distanceToAnthill})`);
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å —é–Ω–∏—Ç–∞ –ø–æ –µ–≥–æ —Ç–∏–ø—É.
     * @param {string} unitTypeName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —é–Ω–∏—Ç–∞
     * @returns {number} –ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å —é–Ω–∏—Ç–∞
     */
    getUnitCargoCapacity(unitTypeName) {
        const capacities = {
            worker: 8,    // Workers are the best carriers
            scout: 4,     // Scouts are fast but carry less
            soldier: 2    // Soldiers focus on combat, not carrying
        };
        return capacities[unitTypeName] || 2;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ—Å—ë—Ç —é–Ω–∏—Ç.
     * @param {Object} unit - –Æ–Ω–∏—Ç —Å –≥—Ä—É–∑–æ–º
     * @returns {number} –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞
     */
    calculateCargoValue(unit) {
        if (!unit.food || !unit.food.amount || !unit.food.type) {
            return 0;
        }
        
        const { FOOD_CALORIES } = require('../constants/GameConstants');
        const resourceValue = FOOD_CALORIES[unit.food.type] || 0;
        
        return resourceValue * unit.food.amount;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —Ä–µ–π–¥–∞ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–∏–π –º—É—Ä–∞–≤–µ–π–Ω–∏–∫.
     * @param {Object} unit - –Æ–Ω–∏—Ç-–Ω–∞–ø–∞–¥–∞—é—â–∏–π
     * @param {Object} enemyAnthill - –í—Ä–∞–∂–µ—Å–∫–∏–π –º—É—Ä–∞–≤–µ–π–Ω–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Ñ–ª–∞–≥–æ–º feasible –∏ –æ—Ü–µ–Ω–∫–æ–π score
     */
    analyzeRaidFeasibility(unit, enemyAnthill, analysis) {
        const myAnthill = analysis.units.anthill;
        if (!myAnthill) {
            return { feasible: false, score: 0, reason: 'No home anthill found' };
        }
        
        // –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        const distance = this.calculateDistance(unit, enemyAnthill);
        const distanceFromHome = this.calculateDistance(myAnthill, enemyAnthill);
        const myUnits = analysis.units.myUnits;
        const enemyUnits = analysis.units.enemyUnits;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é - —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –Ω–µ —Å—Ç–æ–∏—Ç –∏–¥—Ç–∏
        if (distance > 40) {
            return { feasible: false, score: 0, reason: `Too far (distance: ${distance})` };
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—ã
        const myFighters = myUnits.filter(u => u.type === this.unitTypes.SOLDIER);
        const nearbyEnemies = enemyUnits.filter(enemy => 
            this.calculateDistance(enemy, enemyAnthill) <= 8
        );
        
        // –û—Ü–µ–Ω–∫–∞ –º–æ–∏—Ö –±–æ–µ–≤—ã—Ö —Å–∏–ª
        const myPower = myFighters.reduce((power, fighter) => {
            const stats = this.unitStats[fighter.type];
            return power + (stats ? stats.attack * (stats.health / 100) : 50);
        }, 0);
        
        // –û—Ü–µ–Ω–∫–∞ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —Å–∏–ª —Ä—è–¥–æ–º —Å –∏—Ö –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–æ–º
        const enemyPower = nearbyEnemies.reduce((power, enemy) => {
            const stats = this.unitStats[enemy.type];
            return power + (stats ? stats.attack * (stats.health / 100) : 50);
        }, 0) + 200; // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∑–∞—â–∏—Ç—É –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ
        if (myPower < enemyPower * 0.8) {
            return { 
                feasible: false, 
                score: 0, 
                reason: `Insufficient power (my: ${myPower.toFixed(1)}, enemy: ${enemyPower.toFixed(1)})` 
            };
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é —Ñ–∞–∑—É –∏ —Ä–µ—Å—É—Ä—Å—ã
        const gameState = analysis.gameState;
        const myCalories = gameState.calories || 0;
        const turn = gameState.turnNo || 0;
        
        // –í –ø–æ–∑–¥–Ω–µ–π –∏–≥—Ä–µ —Ä–µ–π–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º
        let phaseMultiplier = 1.0;
        if (turn > 50) {
            phaseMultiplier = 2.0; // –ü–æ–∑–¥–Ω—è—è –∏–≥—Ä–∞ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        } else if (turn > 25) {
            phaseMultiplier = 1.5; // –°—Ä–µ–¥–Ω—è—è –∏–≥—Ä–∞
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        let score = 0;
        
        // –§–∞–∫—Ç–æ—Ä –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –≤ —Å–∏–ª–µ (0-100)
        const powerRatio = Math.min(myPower / enemyPower, 2.0);
        score += powerRatio * 100;
        
        // –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å (—á–µ–º –±–ª–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ) (0-50)
        const distanceScore = Math.max(0, 50 - distance);
        score += distanceScore;
        
        // –®—Ç—Ä–∞—Ñ –∑–∞ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –¥–æ–º–∞ (0-30)
        const homeDistancePenalty = Math.min(30, distanceFromHome * 0.5);
        score -= homeDistancePenalty;
        
        // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞—Ç—è–∂–Ω–æ–≥–æ –±–æ—è (0-30)
        const resourceBonus = Math.min(30, myCalories / 100);
        score += resourceBonus;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        score *= phaseMultiplier;
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–π–¥–∞
        const minScore = 120;
        const feasible = score >= minScore;
        
        logger.debug(`Raid analysis for anthill at (${enemyAnthill.q}, ${enemyAnthill.r}): 
            Power ratio: ${powerRatio.toFixed(2)}, Distance: ${distance}, 
            Score: ${score.toFixed(1)}, Feasible: ${feasible}`);
        
        return {
            feasible,
            score,
            anthill: enemyAnthill,
            powerRatio,
            distance,
            reason: feasible ? 'Raid is feasible' : `Score too low (${score.toFixed(1)} < ${minScore})`
        };
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —é–Ω–∏—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {number} currentTurn - –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
     * @returns {boolean} true, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
     */
    shouldRestrictMovementForEndGame(unit, analysis, currentTurn) {
        const gameEndTurn = 420;
        const endGameThreshold = 380; // –ù–∞—á–∏–Ω–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ 40 —Ö–æ–¥–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞
        
        if (currentTurn < endGameThreshold) {
            return false;
        }
        
        const anthill = analysis.units.anthill;
        if (!anthill) {
            return false;
        }
        
        const turnsLeft = gameEndTurn - currentTurn;
        const distanceToHome = this.calculateDistance(unit, anthill);
        const unitSpeed = this.getUnitSpeed(unit.type);
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —é–Ω–∏—Ç –º–æ–∂–µ—Ç —É–π—Ç–∏ –∏ —É—Å–ø–µ—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è
        const maxSafeDistance = Math.floor((turnsLeft * unitSpeed) / 2) - 2; // -2 –¥–ª—è –∑–∞–ø–∞—Å–∞
        
        logger.debug(`End-game check: Turn ${currentTurn}, turns left: ${turnsLeft}, distance to home: ${distanceToHome}, max safe distance: ${maxSafeDistance}`);
        
        // –ï—Å–ª–∏ —é–Ω–∏—Ç —É–∂–µ –¥–∞–ª–µ–∫–æ, –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
        if (distanceToHome > maxSafeDistance) {
            logger.info(`Unit ${unit.id} restricted movement due to end-game (distance: ${distanceToHome} > max: ${maxSafeDistance})`);
            return true;
        }
        
        return false;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Å–±–æ—Ä—É –±–ª–∏–∑–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –±–ª–∏–∑–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    getNearbyResourceTasks(unit, analysis, resourceAssignmentManager = null) {
        const tasks = [];
        const anthill = analysis.units.anthill;
        if (!anthill) return tasks;
        
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –Ω–µ –¥–∞–µ–º –ø—Ä—è–º—ã–µ –∑–∞–¥–∞—á–∏
        if (resourceAssignmentManager) {
            logger.debug(`Unit ${unit.id}: Using central manager for end-game resource assignment`);
            return tasks;
        }
        
        const currentTurn = analysis.gameState?.turnNo || 0;
        const turnsLeft = 420 - currentTurn;
        const maxSafeDistance = Math.floor(turnsLeft / 4); // –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫—Ç–∞—Ä (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        const nearbyNectar = (analysis.resources.byType.nectar || []).filter(resource => 
            this.calculateDistance(unit, resource) <= maxSafeDistance
        );
        if (nearbyNectar.length > 0) {
            tasks.push('nectar_collection');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–ª–µ–±
        const nearbyBread = (analysis.resources.byType.bread || []).filter(resource => 
            this.calculateDistance(unit, resource) <= maxSafeDistance
        );
        if (nearbyBread.length > 0) {
            tasks.push('bread_collection');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–±–ª–æ–∫–∏
        const nearbyApples = (analysis.resources.byType.apple || []).filter(resource => 
            this.calculateDistance(unit, resource) <= maxSafeDistance
        );
        if (nearbyApples.length > 0) {
            tasks.push('apple_collection');
        }
        
        logger.debug(`End-game nearby resources for unit ${unit.id}: nectar=${nearbyNectar.length}, bread=${nearbyBread.length}, apples=${nearbyApples.length}`);
        
        return tasks;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —é–Ω–∏—Ç–∞ –ø–æ –µ–≥–æ —Ç–∏–ø—É.
     * @param {number} unitType - –¢–∏–ø —é–Ω–∏—Ç–∞
     * @returns {number} –°–∫–æ—Ä–æ—Å—Ç—å —é–Ω–∏—Ç–∞ –≤ –≥–µ–∫—Å–∞—Ö –∑–∞ —Ö–æ–¥
     */
    getUnitSpeed(unitType) {
        const speeds = {
            [this.unitTypes.WORKER]: 3,
            [this.unitTypes.SOLDIER]: 4,
            [this.unitTypes.SCOUT]: 7
        };
        return speeds[unitType] || 3;
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —é–Ω–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π –∏–∑-–∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
     * @param {Object} unit - –Æ–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —é–Ω–∏—Ç –¥–æ–ª–∂–µ–Ω –∏–∑–±–µ–≥–∞—Ç—å –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π
     */
    shouldAvoidDistractions(unit, analysis) {
        if (!unit.food || !unit.food.amount) {
            return false; // –ù–µ—Ç –≥—Ä—É–∑–∞ - –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
        }
        
        const unitTypeName = this.unitTypeNames[unit.type];
        const maxCapacity = this.getUnitCargoCapacity(unitTypeName);
        const currentCargo = unit.food.amount;
        const cargoPercentage = (currentCargo / maxCapacity) * 100;
        
        // –ü–æ—Ä–æ–≥ –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π - 50% –∑–∞–≥—Ä—É–∑–∫–∏
        const distractionThreshold = maxCapacity * 0.5;
        const shouldAvoid = currentCargo >= distractionThreshold;
        
        if (shouldAvoid) {
            const resourceType = this.foodTypeNames[unit.food.type] || unit.food.type;
            logger.info(`üíº Unit ${unit.id} avoiding distractions: ${cargoPercentage.toFixed(1)}% loaded with ${resourceType} (${currentCargo}/${maxCapacity})`);
        }
        
        return shouldAvoid;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Å–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤.
     * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –±–ª–∏–∑–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–∑–±–µ–≥–∞–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π.
     * @param {Object} unit - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —é–Ω–∏—Ç
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Object} resourceAssignmentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
     */
    getSafeResourceTasks(unit, analysis, resourceAssignmentManager) {
        const tasks = [];
        const anthill = analysis.units.anthill;
        if (!anthill) return tasks;
        
        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.debug(`Unit ${unit.id}: Using central manager for safe resource assignment`);
        return tasks;
        
        const maxSafeDistance = 8; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const threats = analysis.threats.threats || [];
        
        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
        const isSafePosition = (position) => {
            return threats.every(threat => 
                this.calculateDistance(position, threat.unit) > 5
            );
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫—Ç–∞—Ä (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–∞–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤)
        if (analysis.resources.byType.nectar) {
            const safeNectar = analysis.resources.byType.nectar.filter(resource => {
                const distance = this.calculateDistance(unit, resource);
                return distance <= maxSafeDistance && isSafePosition(resource);
            });
            
            if (safeNectar.length > 0) {
                logger.debug(`Unit ${unit.id} found ${safeNectar.length} safe nectar sources nearby`);
                tasks.push('nectar_collection');
                return tasks; // –ù–µ–∫—Ç–∞—Ä - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
        }
        
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —é–Ω–∏—Ç –Ω–µ—Å–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ—Å—É—Ä—Å, –æ–Ω –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –µ—â–µ
        if (unit.food && unit.food.type) {
            const compatibleResourceType = this.foodTypeNames[unit.food.type];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            let resourceArray = [];
            let taskName = '';
            
            if (unit.food.type === this.foodTypes.BREAD) {
                resourceArray = analysis.resources.byType.bread || [];
                taskName = 'bread_collection';
            } else if (unit.food.type === this.foodTypes.APPLE) {
                resourceArray = analysis.resources.byType.apple || [];
                taskName = 'apple_collection';
            }
            
            if (resourceArray.length > 0) {
                const safeResources = resourceArray.filter(resource => {
                    const distance = this.calculateDistance(unit, resource);
                    return distance <= maxSafeDistance && isSafePosition(resource);
                });
                
                if (safeResources.length > 0) {
                    logger.debug(`Unit ${unit.id} found ${safeResources.length} safe ${compatibleResourceType} sources nearby`);
                    tasks.push(taskName);
                }
            }
        }
        
        if (tasks.length === 0) {
            logger.debug(`Unit ${unit.id} found no safe resource collection opportunities, should head to anthill`);
        }
        
        return tasks;
    }
    /**
     * –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞ –∫–∞—Ä—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã —É–≥—Ä–æ–∑.
     * –†–∞–∑–≤–µ–¥—á–∏–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∏—Ä—É—é—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    systematicExploration(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        const gameState = analysis.gameState;
        const turn = gameState.turnNo || 0;
        const threatMap = analysis.threatMap;
        const traversabilityMap = analysis.traversabilityMap;
        
        // PRIORITY 1: Use traversability-optimized exploration targets
        if (traversabilityMap && traversabilityMap.explorationTargets.length > 0) {
            const bestTarget = this.selectBestTraversabilityTarget(unit, traversabilityMap.explorationTargets);
            if (bestTarget) {
                const path = this.findPath(unit, bestTarget.position, analysis);
                if (path && path.length > 0) {
                    logger.info(`üó∫Ô∏è Scout ${unit.id} exploring low-cost area at (${bestTarget.position.q}, ${bestTarget.position.r}) - Cost: ${bestTarget.cost}, Priority: ${bestTarget.priority.toFixed(1)}`);
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'systematic_exploration',
                            target: bestTarget.position,
                            priority: 'high',
                            reason: 'optimal_traversability',
                            traversabilityBased: true,
                            movementCost: bestTarget.cost
                        }
                    };
                }
            }
        }
        
        // PRIORITY 2: Check for threat map based targets
        if (threatMap && threatMap.recommendedScoutTargets.length > 0) {
            const threatBasedTarget = this.selectBestThreatMapTarget(unit, threatMap.recommendedScoutTargets, traversabilityMap);
            if (threatBasedTarget) {
                const path = this.findPath(unit, threatBasedTarget, analysis);
                if (path && path.length > 0) {
                    logger.info(`üéØ Scout ${unit.id} investigating threat area at (${threatBasedTarget.q}, ${threatBasedTarget.r}) - Interest: ${threatBasedTarget.priority.toFixed(1)}`);
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'systematic_exploration',
                            target: threatBasedTarget,
                            priority: 'high',
                            reason: threatBasedTarget.reason,
                            threatMapBased: true
                        }
                    };
                }
            }
        }
        
        // PRIORITY 2: Enhanced directional exploration based on threat directions
        if (threatMap && threatMap.threatDirections.length > 0) {
            const priorityDirection = threatMap.threatDirections[0]; // Highest threat direction
            const directionalTarget = this.generateDirectionalExplorationTarget(
                unit, anthill, priorityDirection.direction, turn
            );
            
            if (directionalTarget) {
                const path = this.findPath(unit, directionalTarget, analysis);
                if (path && path.length > 0) {
                    logger.info(`üß≠ Scout ${unit.id} priority directional exploration ${priorityDirection.direction} to (${directionalTarget.q}, ${directionalTarget.r})`);
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'systematic_exploration',
                            target: directionalTarget,
                            priority: 'high',
                            direction: priorityDirection.direction,
                            threatDirectionBased: true
                        }
                    };
                }
            }
        }
        
        // PRIORITY 3: Fallback to traditional spiral exploration
        const currentRadius = Math.min(60, 15 + Math.floor(turn / 20) * 2);
        const spiralTarget = this.generateSpiralExplorationTarget(unit, anthill, currentRadius, analysis);
        
        if (spiralTarget) {
            const path = this.findPath(unit, spiralTarget, analysis);
            if (path && path.length > 0) {
                logger.info(`üåÄ Scout ${unit.id} spiral exploration to (${spiralTarget.q}, ${spiralTarget.r}) at radius ${currentRadius}`);
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'systematic_exploration',
                        target: spiralTarget,
                        priority: 'medium',
                        explorationRadius: currentRadius,
                        spiralBased: true
                    }
                };
            }
        }
        
        logger.debug(`Scout ${unit.id}: No valid exploration targets found`);
        return null;
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Ü–µ–ª—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞—Ä—Ç—ã —É–≥—Ä–æ–∑.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Array} threatTargets - –¶–µ–ª–∏ –æ—Ç –∫–∞—Ä—Ç—ã —É–≥—Ä–æ–∑
     * @returns {Object|null} –õ—É—á—à–∞—è —Ü–µ–ª—å –∏–ª–∏ null
     */
    selectBestThreatMapTarget(unit, threatTargets, traversabilityMap = null) {
        if (threatTargets.length === 0) return null;
        
        // Score targets based on priority, distance, and traversability
        const scoredTargets = threatTargets.map(target => {
            const distance = this.calculateDistance(unit, target);
            const distanceScore = Math.max(0.1, 1 / (1 + distance * 0.1));
            let traversabilityScore = 1.0;
            
            // Factor in traversability if available
            if (traversabilityMap && traversabilityMap.traversabilityMap) {
                const posKey = `${target.q},${target.r}`;
                const hexData = traversabilityMap.traversabilityMap.get(posKey);
                if (hexData) {
                    // Lower cost = higher score
                    traversabilityScore = Math.max(0.1, 3 / (hexData.cost + 1));
                }
            }
            
            const score = target.priority * distanceScore * traversabilityScore;
            
            return { ...target, distance, score, traversabilityScore };
        });
        
        // Sort by score (highest first)
        scoredTargets.sort((a, b) => b.score - a.score);
        
        // Return best target within reasonable distance
        const maxDistance = 35;
        for (const target of scoredTargets) {
            if (target.distance <= maxDistance) {
                return target;
            }
        }
        
        return null;
    }
    
    /**
     * Selects best exploration target from traversability analysis.
     * @param {Object} unit - Scout unit
     * @param {Array} explorationTargets - Available exploration targets
     * @returns {Object|null} Best target or null
     */
    selectBestTraversabilityTarget(unit, explorationTargets) {
        if (explorationTargets.length === 0) return null;
        
        // Score targets based on priority, distance, and movement cost
        const scoredTargets = explorationTargets.map(target => {
            const distance = this.calculateDistance(unit, target.position);
            const distanceScore = Math.max(0.1, 1 / (1 + distance * 0.05));
            const costScore = Math.max(0.1, 3 / (target.cost + 1)); // Lower cost = higher score
            const priorityScore = target.priority;
            
            const totalScore = priorityScore * distanceScore * costScore;
            
            return { 
                ...target, 
                distance, 
                totalScore,
                distanceScore,
                costScore,
                priorityScore
            };
        });
        
        // Sort by total score (highest first)
        scoredTargets.sort((a, b) => b.totalScore - a.totalScore);
        
        // Return best target within reasonable distance and low cost
        const maxDistance = 30;
        const maxCost = 4; // Avoid high-cost areas
        
        for (const target of scoredTargets) {
            if (target.distance <= maxDistance && target.cost <= maxCost) {
                logger.debug(`Selected traversability target: cost=${target.cost}, distance=${target.distance}, priority=${target.priority}, score=${target.totalScore.toFixed(2)}`);
                return target;
            }
        }
        
        // If no good targets, take the best available even if suboptimal
        return scoredTargets.length > 0 ? scoredTargets[0] : null;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ª—å –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} anthill - –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫
     * @param {string} direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≥—Ä–æ–∑—ã
     * @param {number} turn - –ù–æ–º–µ—Ä —Ö–æ–¥–∞
     * @returns {Object|null} –¶–µ–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
     */
    generateDirectionalExplorationTarget(unit, anthill, direction, turn) {
        // Convert direction to vector
        const directionVectors = {
            'E': { q: 1, r: 0 },
            'SE': { q: 0, r: 1 },
            'S': { q: -1, r: 1 },
            'SW': { q: -1, r: 0 },
            'W': { q: 0, r: -1 },
            'NW': { q: 1, r: -1 },
            'N': { q: 1, r: 0 },
            'NE': { q: 1, r: -1 }
        };
        
        const dirVector = directionVectors[direction];
        if (!dirVector) return null;
        
        // Calculate target distance based on game progression
        const baseDistance = 20;
        const timeMultiplier = Math.floor(turn / 15);
        const targetDistance = Math.min(40, baseDistance + timeMultiplier * 3);
        
        // Add some randomness to avoid predictable patterns
        const randomOffset = (Math.random() - 0.5) * 0.3;
        const effectiveDistance = targetDistance * (1 + randomOffset);
        
        return {
            q: Math.round(anthill.q + dirVector.q * effectiveDistance),
            r: Math.round(anthill.r + dirVector.r * effectiveDistance)
        };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ª—å –¥–ª—è —Å–ø–∏—Ä–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} anthill - –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫
     * @param {number} currentRadius - –¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã
     * @returns {Object|null} –¶–µ–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
     */
    generateSpiralExplorationTarget(unit, anthill, currentRadius, analysis) {
        // Generate exploration points in spiral pattern
        const explorationPoints = this.generateSpiralPattern(anthill, currentRadius);
        
        // Filter out explored points
        const unexploredPoints = explorationPoints.filter(point => 
            !this.isPositionExplored(point, analysis)
        );
        
        if (unexploredPoints.length === 0) {
            // If all points explored, expand radius
            const extendedPoints = this.generateSpiralPattern(anthill, currentRadius + 10);
            unexploredPoints.push(...extendedPoints.slice(explorationPoints.length));
        }
        
        // Select closest unexplored point
        let bestTarget = null;
        let minDistance = Infinity;
        
        for (const point of unexploredPoints) {
            const distance = this.calculateDistance(unit, point);
            if (distance < minDistance) {
                minDistance = distance;
                bestTarget = point;
            }
        }
        
        return bestTarget;
    }
    
    /**
     * –†–∞–∑–≤–µ–¥–∫–∞ —Å –∏–∑–±–µ–≥–∞–Ω–∏–µ–º –±–æ—è - —Ä–∞–∑–≤–µ–¥—á–∏–∫–∏ –∏—Å—Å–ª–µ–¥—É—é—Ç –∫–∞—Ä—Ç—É, –Ω–æ –æ—Ç—Å—Ç—É–ø–∞—é—Ç –ø—Ä–∏ –≤–∏–¥–µ –≤—Ä–∞–≥–æ–≤.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    avoidCombatExploration(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        const enemyUnits = analysis.units.enemyUnits || [];
        const threats = analysis.threats.threats || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–∞–≥–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
        const nearbyEnemies = enemyUnits.filter(enemy => 
            this.calculateDistance(unit, enemy) <= 10
        );
        
        const nearbyThreats = threats.filter(threat => 
            this.calculateDistance(unit, threat.unit) <= 8
        );
        
        // –ï—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –≤—Ä–∞–≥–∏, –æ—Ç—Å—Ç—É–ø–∞–µ–º –∫ –±–∞–∑–µ
        if (nearbyEnemies.length > 0 || nearbyThreats.length > 0) {
            logger.info(`üèÉ Scout ${unit.id} retreating from combat: ${nearbyEnemies.length} enemies, ${nearbyThreats.length} threats nearby`);
            
            // –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏ –±–∞–∑–æ–π
            const safeRetreatPosition = this.calculateSafeRetreatPosition(unit, anthill, enemyUnits);
            
            if (safeRetreatPosition) {
                const path = this.findPath(unit, safeRetreatPosition, analysis);
                if (path && path.length > 0) {
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'avoid_combat_exploration',
                            target: safeRetreatPosition,
                            priority: 'high',
                            reason: 'retreating_from_enemies'
                        }
                    };
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∏–¥–µ–º –ø—Ä—è–º–æ –∫ –±–∞–∑–µ
            const path = this.findPath(unit, anthill, analysis);
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'avoid_combat_exploration',
                        target: anthill,
                        priority: 'high',
                        reason: 'emergency_retreat'
                    }
                };
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —É–≥—Ä–æ–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–µ–¥–∫—É, –Ω–æ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        return this.cautiousExploration(unit, analysis);
    }
    
    /**
     * –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞ - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object|null} –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ null
     */
    cautiousExploration(unit, analysis) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        const maxSafeDistance = 25; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const currentDistance = this.calculateDistance(unit, anthill);
        
        // –ï—Å–ª–∏ —Ä–∞–∑–≤–µ–¥—á–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –±–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (currentDistance > maxSafeDistance) {
            logger.info(`üîô Scout ${unit.id} returning to base: too far from home (${currentDistance} > ${maxSafeDistance})`);
            const path = this.findPath(unit, anthill, analysis);
            if (path && path.length > 0) {
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'avoid_combat_exploration',
                        target: anthill,
                        priority: 'medium',
                        reason: 'return_to_safe_distance'
                    }
                };
            }
        }
        
        // –ò—â–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        const safeExplorationTargets = this.generateSafeExplorationTargets(unit, analysis, maxSafeDistance);
        
        if (safeExplorationTargets.length > 0) {
            const target = safeExplorationTargets[0];
            const path = this.findPath(unit, target, analysis);
            
            if (path && path.length > 0) {
                logger.info(`üîç Scout ${unit.id} cautious exploration to (${target.q}, ${target.r})`);
                return {
                    unit_id: unit.id,
                    path: path,
                    assignment: {
                        type: 'avoid_combat_exploration',
                        target: target,
                        priority: 'medium',
                        reason: 'safe_exploration'
                    }
                };
            }
        }
        
        logger.debug(`Scout ${unit.id}: No safe exploration targets found`);
        return null;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è.
     * @param {Object} unit - –û—Ç—Å—Ç—É–ø–∞—é—â–∏–π —é–Ω–∏—Ç
     * @param {Object} safePosition - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–æ–±—ã—á–Ω–æ –±–∞–∑–∞)
     * @param {Array} enemies - –ú–∞—Å—Å–∏–≤ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
     * @returns {Object|null} –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è
     */
    calculateSafeRetreatPosition(unit, safePosition, enemies) {
        if (!unit || !safePosition) return null;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —é–Ω–∏—Ç–∞ –∫ –±–∞–∑–µ
        const directionToSafety = {
            q: safePosition.q - unit.q,
            r: safePosition.r - unit.r
        };
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const distance = this.calculateDistance(unit, safePosition);
        if (distance === 0) return safePosition;
        
        const normalizedDir = {
            q: directionToSafety.q / distance,
            r: directionToSafety.r / distance
        };
        
        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –±–∞–∑–µ, –∫–æ—Ç–æ—Ä–∞—è –¥–∞–ª–µ–∫–∞ –æ—Ç –≤—Ä–∞–≥–æ–≤
        const retreatDistance = Math.min(8, Math.floor(distance / 2));
        const retreatPosition = {
            q: Math.round(unit.q + normalizedDir.q * retreatDistance),
            r: Math.round(unit.r + normalizedDir.r * retreatDistance)
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–µ–∑–æ–ø–∞—Å–Ω–∞ –ª–∏ —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        const isSafe = enemies.every(enemy => 
            this.calculateDistance(retreatPosition, enemy) > 5
        );
        
        return isSafe ? retreatPosition : safePosition;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
     * @param {Object} unit - –Æ–Ω–∏—Ç-—Ä–∞–∑–≤–µ–¥—á–∏–∫
     * @param {Object} analysis - –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {number} maxDistance - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç –±–∞–∑—ã
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
     */
    generateSafeExplorationTargets(unit, analysis, maxDistance) {
        const anthill = analysis.units.anthill;
        const enemyUnits = analysis.units.enemyUnits || [];
        const threats = analysis.threats.threats || [];
        
        if (!anthill) return [];
        
        const targets = [];
        const directions = [
            { q: 1, r: 0 },   // East
            { q: 0, r: 1 },   // Southeast  
            { q: -1, r: 1 },  // Southwest
            { q: -1, r: 0 },  // West
            { q: 0, r: -1 },  // Northwest
            { q: 1, r: -1 }   // Northeast
        ];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏—è—Ö
        for (let distance = 8; distance <= maxDistance; distance += 4) {
            for (const direction of directions) {
                const target = {
                    q: anthill.q + Math.round(direction.q * distance),
                    r: anthill.r + Math.round(direction.r * distance)
                };
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ü–µ–ª–∏
                const isSafe = this.isTargetSafeForScout(target, enemyUnits, threats);
                const isUnexplored = !this.isPositionExplored(target, analysis);
                
                if (isSafe && isUnexplored) {
                    targets.push({
                        ...target,
                        distance: this.calculateDistance(unit, target),
                        safetyScore: this.calculateSafetyScore(target, enemyUnits, threats)
                    });
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –±–ª–∏–∑–æ—Å—Ç–∏
        targets.sort((a, b) => {
            const safetyDiff = b.safetyScore - a.safetyScore;
            if (Math.abs(safetyDiff) > 0.1) return safetyDiff;
            return a.distance - b.distance;
        });
        
        return targets.slice(0, 5); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —Ü–µ–ª–µ–π
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–∞ –ª–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑–≤–µ–¥—á–∏–∫–∞.
     * @param {Object} target - –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Array} enemies - –í—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã
     * @param {Array} threats - –£–≥—Ä–æ–∑—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —Ü–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–∞
     */
    isTargetSafeForScout(target, enemies, threats) {
        const safeDistance = 8;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Ä–∞–≥–æ–≤
        const tooCloseToEnemies = enemies.some(enemy => 
            this.calculateDistance(target, enemy) < safeDistance
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–≥—Ä–æ–∑
        const tooCloseToThreats = threats.some(threat => 
            this.calculateDistance(target, threat.unit) < safeDistance
        );
        
        return !tooCloseToEnemies && !tooCloseToThreats;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏.
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏
     * @param {Array} enemies - –í—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã
     * @param {Array} threats - –£–≥—Ä–æ–∑—ã
     * @returns {number} –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤—ã—à–µ = –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
     */
    calculateSafetyScore(position, enemies, threats) {
        let score = 100; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –≤—Ä–∞–≥–∞–º
        enemies.forEach(enemy => {
            const distance = this.calculateDistance(position, enemy);
            if (distance < 15) {
                const penalty = Math.max(0, 50 - distance * 3);
                score -= penalty;
            }
        });
        
        // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —É–≥—Ä–æ–∑–∞–º
        threats.forEach(threat => {
            const distance = this.calculateDistance(position, threat.unit);
            if (distance < 12) {
                const penalty = Math.max(0, 40 - distance * 3);
                score -= penalty;
            }
        });
        
        return Math.max(0, score);
    }
    
    /**
     * Handles unit actions during recovery mode.
     * @param {Object} unit - Unit to handle
     * @param {Object} analysis - Game analysis
     * @param {Object} strategy - Recovery strategy
     * @param {Object} resourceAssignmentManager - Resource assignment manager
     * @returns {Object|null} Unit action or null
     */
    handleRecoveryModeUnit(unit, analysis, strategy, resourceAssignmentManager) {
        const anthill = analysis.units.anthill;
        if (!anthill) return null;
        
        const distanceToBase = this.calculateDistance(unit, anthill);
        const maxSafeDistance = strategy.resourceStrategy?.maxCollectionDistance || 15;
        
        // PRIORITY 1: Return loaded units to base immediately
        if (this.shouldReturnToAnthill(unit, analysis)) {
            logger.info(`üö® Recovery: Unit ${unit.id} returning to base with cargo`);
            return this.returnToAnthill(unit, analysis);
        }
        
        // PRIORITY 2: Soldiers defend base perimeter only
        if (unit.type === this.unitTypes.SOLDIER) {
            // Keep soldiers close to base in recovery mode
            if (distanceToBase > 8) {
                logger.info(`üö® Recovery: Soldier ${unit.id} returning to defensive perimeter`);
                const defensivePosition = this.getRecoveryDefensivePosition(unit, anthill);
                const path = this.findPath(unit, defensivePosition, analysis);
                
                if (path && path.length > 0) {
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'recovery_defense',
                            target: defensivePosition,
                            priority: 'high'
                        }
                    };
                }
            }
            
            // Stay in defensive position - don't patrol far
            return null;
        }
        
        // PRIORITY 3: Non-combat units - only workers collect in recovery mode
        if (unit.type === this.unitTypes.WORKER) {
            // Only collect resources very close to base
            const centralAssignment = resourceAssignmentManager.getUnitAssignment(unit.id);
            if (centralAssignment) {
                const resourceDistance = this.calculateDistance(anthill, centralAssignment.target);
                if (resourceDistance <= maxSafeDistance) {
                    logger.info(`üö® Recovery: Worker ${unit.id} collecting safe resource at distance ${resourceDistance}`);
                    const moveResult = this.executeResourceAssignment(unit, centralAssignment, analysis, resourceAssignmentManager);
                    if (!moveResult) {
                        // Path failed - release assignment
                        logger.warn(`üö´ Recovery: Releasing assignment for unit ${unit.id} due to pathfinding failure`);
                        resourceAssignmentManager.releaseUnitAssignment(unit.id);
                    }
                    return moveResult;
                } else {
                    logger.warn(`üö® Recovery: Worker ${unit.id} abandoning distant resource (distance ${resourceDistance} > ${maxSafeDistance})`);
                    // Release the assignment
                    resourceAssignmentManager.releaseUnitAssignment(unit.id);
                }
            }
            
            // If no safe assignment, return to base
            if (distanceToBase > 5) {
                logger.info(`üö® Recovery: Worker ${unit.id} returning to base (distance ${distanceToBase})`);
                const path = this.findPath(unit, anthill, analysis);
                if (path && path.length > 0) {
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'recovery_return',
                            target: anthill,
                            priority: 'medium'
                        }
                    };
                }
            }
            
            return null; // Stay near base
        }
        
        // PRIORITY 4: Scouts should return to base immediately in recovery mode
        if (unit.type === this.unitTypes.SCOUT) {
            if (distanceToBase > 3) {
                logger.info(`üö® Recovery: Scout ${unit.id} returning to base immediately`);
                const path = this.findPath(unit, anthill, analysis);
                if (path && path.length > 0) {
                    return {
                        unit_id: unit.id,
                        path: path,
                        assignment: {
                            type: 'recovery_return',
                            target: anthill,
                            priority: 'medium'
                        }
                    };
                }
            }
            
            return null; // Stay at base
        }
        
        return null;
    }
    
    /**
     * Gets a defensive position near the anthill for recovery mode.
     * @param {Object} unit - Soldier unit
     * @param {Object} anthill - Anthill position
     * @returns {Object} Defensive position
     */
    getRecoveryDefensivePosition(unit, anthill) {
        const defensiveRadius = 6;
        
        // Position soldiers in a defensive ring around the anthill
        const soldierHash = Math.abs(unit.id.charCodeAt(0)) % 8;
        const angle = (soldierHash / 8) * Math.PI * 2;
        
        return {
            q: Math.round(anthill.q + Math.cos(angle) * defensiveRadius),
            r: Math.round(anthill.r + Math.sin(angle) * defensiveRadius)
        };
    }
}

module.exports = UnitManager;